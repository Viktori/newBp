// Rem converter mixin
//
// Convert values to rem values.
// This mixin uses default font-size variable $base-font-size.
// Do not use in font shorthand, IE9-10 will ignore that rule.
// Pseudo classes in IE9-10 will also ignore the rem unless a specified value in px is rendered.
//
// @property - CSS property for which to convert into rem values
// @values - Value list of that rem property
// @pseudo - Boolean value for pseudo classes

$base-font-size: 16;

@mixin rem($property, $values, $pseudo: false) {
  $px-values: ();
  $rem-values: ();

  @each $value in $values {
    @if $value == 0 or type-of($value) != 'number' {
      $px-values: append($px-values, $value);
      $rem-values: append($rem-values, $value);
    } @else {
      $px-values: append($px-values, $value);
      $rem-values: append($rem-values, $value / $base-font-size * 1rem);
    }
  }

  @if $pseudo == true {
    #{$property}: $px-values + px;
  }

  #{$property}: $rem-values;
}

// Font mixin
@mixin font($font-family, $font-size, $font-fallback: $font-sans-serif) {
    font-family: $font-family, $font-fallback;
    @include rem(font-size, $font-size);
}

// Font-face mixin
@mixin font-face($font-family, $file-type: otf, $font-weight: normal, $font-style: normal ) {
  @font-face {
    font-family: $font-family;
    src: url('../fonts/#{$font-family}.#{$file-type}') format('#{$file-type}');
    font-weight: $font-weight;
    font-style: $font-style;
  }
}

/* Arrows mixins */
@mixin arrow-top($size, $color) {
  content: '';
  display: inline-block;
  width: 0; 
  height: 0; 
  border-left: $size solid transparent;
  border-right: $size solid transparent; 
  border-bottom: $size solid $color; 
}

@mixin arrow-down($size, $color) {
  content: '';
  display: inline-block;
  width: 0; 
  height: 0; 
  border-left: $size solid transparent;
  border-right: $size solid transparent; 
  border-top: $size solid $color; 
}
